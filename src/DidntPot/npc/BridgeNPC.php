<?php

namespace DidntPot\npc;

use DidntPot\forms\types\bridge\PlayBridgeForm;
use DidntPot\LobbyCore;
use DidntPot\utils\BasicUtils;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Human;
use pocketmine\entity\Location;
use pocketmine\entity\Skin;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\player\Player;
use sergittos\flanbacore\FlanbaCore;
use xenialdan\skinapi\API;

class BridgeNPC extends Human {

    protected $gravity = 0.0;
    protected ?string $spawningPlayer = null;

    public function onInteract(Player $player, Vector3 $clickPos): bool
    {
        $player->sendForm(new PlayBridgeForm());
        return true;
    }

    public function __construct(Location $location, ?CompoundTag $nbt = null)
    {
        $skin = new Skin('vobs', API::fromImage(imagecreatefrompng(LobbyCore::getInstance()->getDataFolder() . 'bridge.png')), "", "geometry.humanoid.customSlim", file_get_contents(LobbyCore::getInstance()->getDataFolder() . "bridge_npc.json"));
        parent::__construct($location, $skin, $nbt);
        $this->setSize(new EntitySizeInfo("2.3", "1.1", "2.12"));
        $this->setSkin($skin);
    }

    public function entityBaseTick(int $tickDiff = 1): bool
    {
        if(is_null($this->spawningPlayer)) $this->flagForDespawn();
        return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
    }

    public function spawnTo(Player $player): void
    {
        $this->spawningPlayer = $player->getNameTag();
        parent::spawnTo($player); // TODO: Change the autogenerated stub
    }

    public function getSpawningPlayer(): string{

        return $this->spawningPlayer;

    }



}